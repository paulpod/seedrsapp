import * as React from "react"
import {
    Frame,
    Stack,
    PropertyControls,
    ControlType,
    Animatable,
    animate,
    Data,
} from "framer"

// start CSS Styles
const articleTroughStyle: React.CSSProperties = {
    height: "100%",
    display: "flex",
    flexDirection: "row",
    alignItems: "start",
    justifyContent: "left",
    textAlign: "left",
    color: "white",
    backgroundColor: "#333",
    overflow: "hidden",
}

const buttonLabelStyle: React.CSSProperties = {
    textAlign: "center",
    margin: "0 auto",
    fontSize: "12px",
}
// end CSS styles

// global constants
const glyphSize = 32
const buttonMax = 3

const glyphSVG = {
    none: <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" />,
    checkmark: (
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
            <title>Checkmark</title>
            <path
                fill="white"
                d="M16,3C8.82,3,3,8.82,3,16s5.82,13,13,13s13-5.82,13-13S23.18,3,16,3z M24.161,11.95l-9,11
  	c-0.284,0.346-0.707,0.548-1.154,0.55c-0.002,0-0.004,0-0.007,0c-0.445,0-0.867-0.197-1.152-0.54l-5-6
  	c-0.53-0.637-0.444-1.583,0.192-2.113c0.637-0.532,1.583-0.445,2.113,0.192l3.837,4.605l7.85-9.594
  	c0.525-0.642,1.469-0.736,2.111-0.211C24.591,10.364,24.686,11.309,24.161,11.95z"
            />
        </svg>
    ),
    clear: (
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
            <title>Clear</title>
            <path
                fill="white"
                d="M16,3C8.82,3,3,8.82,3,16s5.82,13,13,13s13-5.82,13-13S23.18,3,16,3z M22.42,20.3c0.55,0.55,0.55,1.45,0,2.01l-0.11,0.11
  	c-0.56,0.55-1.46,0.55-2.01,0l-4.3-4.3l-4.3,4.3c-0.55,0.55-1.45,0.55-2.01,0l-0.11-0.11c-0.55-0.56-0.55-1.46,0-2.01l4.3-4.3
  	l-4.3-4.3c-0.55-0.55-0.55-1.45,0-2.01l0.11-0.11c0.56-0.55,1.46-0.55,2.01,0l4.3,4.3l4.3-4.3c0.55-0.55,1.45-0.55,2.01,0l0.11,0.11
  	c0.55,0.56,0.55,1.46,0,2.01l-4.3,4.3L22.42,20.3z"
            />
        </svg>
    ),
    heart: (
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
            <title>Heart</title>
            <path
                fill="white"
                d="M23.639,4.097c-3.171-0.54-6.015,1.234-7.134,3.916c-0.194,0.465-0.816,0.465-1.01,0c-1.119-2.682-3.962-4.455-7.134-3.916
  	C5.033,4.663,2.844,7.78,3.009,11.174C3.484,20.985,14.939,28,16,28s12.516-7.015,12.991-16.826
  	C29.156,7.78,26.967,4.663,23.639,4.097z"
            />
        </svg>
    ),
    settings: (
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
            <title>Settings</title>
            <path
                fill="white"
                d="M30,17.072v-2.145c0-0.246-0.179-0.456-0.423-0.494l-2.434-0.381c-0.202-0.032-0.358-0.185-0.403-0.384
  	c-0.076-0.345-0.168-0.685-0.274-1.018c-0.062-0.195-0.003-0.405,0.156-0.533l1.914-1.548c0.191-0.155,0.242-0.426,0.119-0.639
  	l-1.073-1.859c-0.123-0.213-0.383-0.305-0.613-0.217l-2.288,0.882c-0.194,0.075-0.411,0.018-0.55-0.136
  	c-0.231-0.256-0.476-0.501-0.732-0.732c-0.155-0.139-0.211-0.356-0.136-0.55l0.882-2.288c0.089-0.23-0.003-0.49-0.217-0.613
  	L22.07,3.343c-0.213-0.123-0.484-0.073-0.639,0.119l-1.548,1.914c-0.129,0.159-0.339,0.218-0.533,0.156
  	c-0.333-0.106-0.673-0.197-1.018-0.274c-0.199-0.044-0.352-0.201-0.384-0.403l-0.381-2.434C17.528,2.179,17.319,2,17.072,2h-2.145
  	c-0.246,0-0.456,0.179-0.494,0.423l-0.381,2.434c-0.032,0.202-0.185,0.358-0.384,0.403c-0.345,0.076-0.685,0.168-1.018,0.274
  	c-0.195,0.062-0.405,0.003-0.533-0.156l-1.548-1.914c-0.155-0.191-0.426-0.242-0.639-0.119L8.071,4.416
  	C7.857,4.539,7.765,4.799,7.854,5.029l0.882,2.288c0.075,0.194,0.018,0.411-0.136,0.55C8.343,8.098,8.098,8.343,7.867,8.599
  	C7.728,8.754,7.511,8.81,7.317,8.736L5.029,7.854c-0.23-0.089-0.49,0.003-0.613,0.217L3.343,9.93
  	c-0.123,0.213-0.073,0.484,0.119,0.639l1.914,1.548c0.159,0.129,0.218,0.339,0.156,0.533c-0.106,0.333-0.197,0.673-0.274,1.018
  	c-0.044,0.199-0.201,0.352-0.403,0.384l-2.434,0.381C2.179,14.472,2,14.681,2,14.928v2.145c0,0.246,0.179,0.456,0.423,0.494
  	l2.434,0.381c0.202,0.032,0.358,0.185,0.403,0.384c0.076,0.345,0.168,0.685,0.274,1.018c0.062,0.195,0.003,0.405-0.156,0.533
  	l-1.914,1.548c-0.191,0.155-0.242,0.426-0.119,0.639l1.073,1.859c0.123,0.213,0.383,0.305,0.613,0.217l2.288-0.882
  	c0.194-0.075,0.411-0.018,0.55,0.136c0.231,0.256,0.476,0.501,0.732,0.732c0.155,0.139,0.211,0.356,0.136,0.55l-0.882,2.288
  	c-0.089,0.23,0.003,0.49,0.217,0.613l1.859,1.073c0.213,0.123,0.484,0.073,0.639-0.119l1.548-1.914
  	c0.129-0.159,0.339-0.218,0.533-0.156c0.333,0.106,0.673,0.197,1.018,0.274c0.199,0.044,0.352,0.201,0.384,0.403l0.381,2.434
  	C14.472,29.821,14.681,30,14.928,30h2.145c0.246,0,0.456-0.179,0.494-0.423l0.381-2.434c0.032-0.202,0.185-0.358,0.384-0.403
  	c0.345-0.076,0.685-0.168,1.018-0.274c0.195-0.062,0.405-0.003,0.533,0.156l1.548,1.914c0.155,0.191,0.426,0.242,0.639,0.119
  	l1.859-1.073c0.213-0.123,0.305-0.383,0.217-0.613l-0.882-2.288c-0.075-0.194-0.018-0.411,0.136-0.55
  	c0.256-0.231,0.501-0.476,0.732-0.732c0.139-0.155,0.356-0.211,0.55-0.136l2.288,0.882c0.23,0.089,0.49-0.003,0.613-0.217
  	l1.073-1.859c0.123-0.213,0.073-0.484-0.119-0.639l-1.914-1.548c-0.159-0.129-0.218-0.339-0.156-0.533
  	c0.106-0.333,0.197-0.673,0.274-1.018c0.044-0.199,0.201-0.352,0.403-0.384l2.434-0.381C29.821,17.528,30,17.319,30,17.072z M16,7.5
  	c3.973,0,7.298,2.715,8.238,6.389c0.079,0.31-0.172,0.611-0.492,0.611h-4.878c-0.167,0-0.315-0.089-0.412-0.226
  	c-0.495-0.704-1.284-1.183-2.188-1.263c-0.166-0.015-0.318-0.099-0.401-0.243l-2.435-4.227c-0.16-0.278-0.025-0.645,0.284-0.73
  	C14.443,7.61,15.209,7.5,16,7.5z M7.5,16c0-2.385,0.977-4.537,2.558-6.08c0.229-0.224,0.614-0.156,0.774,0.121l2.436,4.228
  	c0.083,0.144,0.081,0.316,0.011,0.467C13.102,15.119,13,15.546,13,16s0.102,0.881,0.279,1.264c0.07,0.151,0.072,0.323-0.011,0.467
  	l-2.436,4.228c-0.16,0.277-0.545,0.345-0.774,0.121C8.477,20.537,7.5,18.385,7.5,16z M16,24.5c-0.791,0-1.557-0.11-2.284-0.312
  	c-0.309-0.086-0.444-0.452-0.284-0.73l2.435-4.227c0.083-0.145,0.235-0.228,0.401-0.243c0.903-0.08,1.692-0.558,2.188-1.263
  	c0.096-0.137,0.244-0.226,0.412-0.226h4.878c0.32,0,0.572,0.301,0.492,0.611C23.298,21.785,19.973,24.5,16,24.5z"
            />
        </svg>
    ),
    share: (
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
            <title>Share</title>
            <path
                fill="white"
                d="M23.005,29.008h-14c-1.654,0-3-1.346-3-3v-11c0-1.654,1.346-3,3-3h2.731c0.552,0,1,0.448,1,1s-0.448,1-1,1H9.005
  	c-0.551,0-1,0.449-1,1v11c0,0.552,0.449,1,1,1h14c0.552,0,1-0.448,1-1v-11c0-0.551-0.448-1-1-1h-2.738c-0.553,0-1-0.448-1-1
  	s0.447-1,1-1h2.738c1.654,0,3,1.346,3,3v11C26.005,27.662,24.659,29.008,23.005,29.008z"
            />
            <path
                fill="white"
                d="M16,20c-0.552,0-1-0.447-1-1V6c0-0.552,0.448-1,1-1s1,0.448,1,1v13C17,19.553,16.552,20,16,20z"
            />
            <path
                fill="white"
                d="M20,9c-0.256,0-0.512-0.098-0.707-0.293L16,5.414l-3.293,3.293c-0.391,0.391-1.023,0.391-1.414,0s-0.391-1.023,0-1.414l4-4
  	c0.391-0.391,1.023-0.391,1.414,0l4,4c0.391,0.391,0.391,1.023,0,1.414C20.512,8.902,20.256,9,20,9z"
            />
        </svg>
    ),
    trash: (
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
            <title>Trash</title>
            <path
                fill="white"
                d="M25,7h-3.91c-0.244,0-0.453-0.177-0.493-0.418l-0.318-1.911C20.118,3.707,19.283,3,18.306,3h-4.611
  	c-0.978,0-1.812,0.707-1.973,1.671l-0.318,1.911C11.363,6.823,11.154,7,10.91,7H7C6.448,7,6,7.448,6,8v1c0,0.552,0.448,1,1,1h18
  	c0.552,0,1-0.448,1-1V8C26,7.448,25.552,7,25,7z M13.694,5h4.611l0.333,2h-5.278L13.694,5z"
            />
            <path
                fill="white"
                d="M22.108,29H9.892c-1.061,0-1.938-0.829-1.997-1.889L7.059,12.055C7.027,11.482,7.483,11,8.057,11h15.886
  	c0.574,0,1.03,0.482,0.998,1.055l-0.836,15.055C24.046,28.171,23.169,29,22.108,29z"
            />
        </svg>
    ),
}

// Props & State initialization. This actually seems like it might be optional.
interface Props {
    handleTroughTap: () => void
    sendBackButton1Tapped: () => void
    sendBackButton2Tapped: () => void
    sendBackButton3Tapped: () => void
    buttonWidth: number
    width: number
    height: number
    button1Color: string
    button1Label: string
    button1Glyph:
        | "none"
        | "checkmark"
        | "clear"
        | "heart"
        | "settings"
        | "share"
        | "trash"
    button2Color: string
    button2Label: string
    button2Glyph:
        | "none"
        | "checkmark"
        | "clear"
        | "heart"
        | "settings"
        | "share"
        | "trash"
    button3Color: string
    button3Label: string
    button3Glyph:
        | "none"
        | "checkmark"
        | "clear"
        | "heart"
        | "settings"
        | "share"
        | "trash"
    border: number
    borderPerSide: boolean
    borderTop: number
    borderRight: number
    borderBottom: number
    borderLeft: number
    borderColor: string
}

interface State {
    tapped: boolean
    articleShared: boolean
}

// main class
export class TableSlider extends React.Component<Partial<Props>, State> {
    state = {
        tapped: false,
        articleShared: false,
    }

    static defaultProps = {
        width: 300,
        height: 120,
        buttonWidth: 74,
        button1Color: "gray",
        button1Glyph: "share",
        button1Label: "Share",
        button2Color: "gray",
        button2Glyph: "none",
        button2Label: "",
        button3Color: "gray",
        button3Glyph: "none",
        button3Label: "",
        border: 1,
        borderPerSide: true,
        borderTop: 0,
        borderRight: 0,
        borderBottom: 1,
        borderLeft: 0,
        borderColor: "#666",
    }

    // exposed overrides for component user
    static propertyControls: PropertyControls<Props> = {
        buttonWidth: {
            type: ControlType.Number,
            title: "Button Width",
            min: 44,
            max: 74,
        },
        button1Glyph: {
            type: ControlType.Enum,
            title: "Glyph 1",
            options: [
                "none",
                "checkmark",
                "clear",
                "heart",
                "settings",
                "share",
                "trash",
            ],
        },
        button1Color: {
            type: ControlType.Color,
            title: "Color 1",
            hidden(props) {
                return props.button1Glyph === "none"
            },
        },
        button1Label: {
            type: ControlType.String,
            title: "Label 1",
            hidden(props) {
                return props.button1Glyph === "none"
            },
        },
        button2Glyph: {
            type: ControlType.Enum,
            title: "Glyph 2",
            options: [
                "none",
                "checkmark",
                "clear",
                "heart",
                "settings",
                "share",
                "trash",
            ],
        },
        button2Color: {
            type: ControlType.Color,
            title: "Color 2",
            hidden(props) {
                return props.button2Glyph === "none"
            },
        },
        button2Label: {
            type: ControlType.String,
            title: "Label 2",
            hidden(props) {
                return props.button2Glyph === "none"
            },
        },
        button3Glyph: {
            type: ControlType.Enum,
            title: "Glyph 3",
            options: [
                "none",
                "checkmark",
                "clear",
                "heart",
                "settings",
                "share",
                "trash",
            ],
        },
        button3Color: {
            type: ControlType.Color,
            title: "Color 3",
            hidden(props) {
                return props.button3Glyph === "none"
            },
        },
        button3Label: {
            type: ControlType.String,
            title: "Label 3",
            hidden(props) {
                return props.button3Glyph === "none"
            },
        },
        border: {
            type: ControlType.FusedNumber,
            toggleKey: "borderPerSide",
            toggleTitles: ["All Sides", "Per Side"],
            valueKeys: [
                "borderTop",
                "borderRight",
                "borderBottom",
                "borderLeft",
            ],
            valueLabels: ["T", "R", "B", "L"],
            min: 0,
            title: "Borders",
        },
        borderColor: {
            type: ControlType.Color,
            title: "Border Color",
            hidden(props) {
                // unfortunately complicated boolean logic
                // we display border color if *any* border has a non-zero value
                // if borderPerSide is toggled on, we have to check 4 values
                return (
                    (props.borderPerSide === false && props.border === 0) ||
                    (props.borderPerSide === true &&
                        props.borderTop === 0 &&
                        props.borderRight === 0 &&
                        props.borderBottom === 0 &&
                        props.borderLeft === 0)
                )
            },
        },
    }

    // trough open/shut
    left = Animatable(0)

    handleTroughTap = async (buttonCount: number = 1) => {
        let shiftTo = this.state.tapped
            ? 0
            : -this.props.buttonWidth * buttonCount
        await animate.spring(this.left, shiftTo, {
            tension: 400,
            friction: 100,
        })
        this.setState({ tapped: !this.state.tapped })
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.height != this.props.height) {
            this.forceUpdate()
        }
        if (this.state.tapped === true) {
            let buttonCount = 0
            let userSelectedGlyphs = [
                nextProps.button1Glyph,
                nextProps.button2Glyph,
                nextProps.button3Glyph,
            ]
            for (let i = 0; i < buttonMax; i++) {
                if (userSelectedGlyphs[i] != "none") {
                    buttonCount++
                }
            }
            let shiftTo = -nextProps.buttonWidth * buttonCount
            animate.spring(this.left, shiftTo, { tension: 400, friction: 100 })
        }
    }

    // functions passed down to <ActionButton />s so they can return interactions
    sendBackButton1Tapped = () => {
        Data.sliderButton1()
    }

    sendBackButton2Tapped = () => {
        Data.sliderButton2()
    }

    sendBackButton3Tapped = () => {
        Data.sliderButton3()
    }

    render() {
        // map props shortcuts to this.props
        const {
            children,
            width,
            height,
            buttonWidth,
            button1Color,
            button1Glyph,
            button1Label,
            button2Color,
            button2Glyph,
            button2Label,
            button3Color,
            button3Glyph,
            button3Label,
            border,
            borderPerSide,
            borderTop,
            borderRight,
            borderBottom,
            borderLeft,
            borderColor,
        } = this.props

        let userSelectedGlyphs = [button1Glyph, button2Glyph, button3Glyph]
        let userSelectedLabels = [button1Label, button2Label, button3Label]
        let userSelectedColors = [button1Color, button2Color, button3Color]

        let glyphs = []
        let labels = []
        let colors = []
        let buttonCount = 0

        for (let i = 0; i < buttonMax; i++) {
            if (userSelectedGlyphs[i] != "none") {
                glyphs.push(userSelectedGlyphs[i])
                labels.push(userSelectedLabels[i])
                colors.push(userSelectedColors[i])
                buttonCount++
            }
        }

        return (
            <Frame style={articleTroughStyle} width={width} height={height}>
                <ActionButtons
                    troughWidth={width}
                    troughHeight={height}
                    buttonWidth={buttonWidth}
                    glyphs={glyphs}
                    labels={labels}
                    colors={colors}
                    sendBackButton1Tapped={this.sendBackButton1Tapped}
                    sendBackButton2Tapped={this.sendBackButton2Tapped}
                    sendBackButton3Tapped={this.sendBackButton3Tapped}
                />
                <Frame
                    left={this.left}
                    onTap={this.handleTroughTap.bind(this, buttonCount)}
                    width={width}
                    height={height}
                >
                    <ArticleBlock
                        border={border}
                        borderPerSide={borderPerSide}
                        borderTop={borderTop}
                        borderRight={borderRight}
                        borderBottom={borderBottom}
                        borderLeft={borderLeft}
                        borderColor={borderColor}
                        articleShared={this.state.articleShared}
                        troughWidth={width}
                        troughHeight={height}
                        children={children}
                    />
                </Frame>
            </Frame>
        )
    }
}

// content block which sits on top of trough
class ArticleBlock extends React.Component<Partial<Props>> {
    render() {
        // map props shortcuts to this.props
        const {
            troughWidth,
            troughHeight,
            children,
            border,
            borderPerSide,
            borderTop,
            borderRight,
            borderBottom,
            borderLeft,
            borderColor,
        } = this.props

        const borderWidths = {
            top: borderPerSide ? borderTop : border,
            right: borderPerSide ? borderRight : border,
            bottom: borderPerSide ? borderBottom : border,
            left: borderPerSide ? borderLeft : border,
        }

        return (
            <Frame
                width={troughWidth}
                height={troughHeight}
                background={"white"}
                borderWidth={borderWidths}
                borderColor={borderColor}
            >
                {children}
            </Frame>
        )
    }
}

class ActionButtons extends React.Component<Partial<Props>, State> {
    render() {
        // map props shortcuts to this.props
        const {
            troughHeight,
            troughWidth,
            glyphs,
            labels,
            colors,
            buttonWidth,
            sendBackButton1Tapped,
            sendBackButton2Tapped,
            sendBackButton3Tapped,
        } = this.props

        let finalButtonCount = glyphs.length
        let buttonFrames = []
        let actionButtonAreaWidth = buttonWidth * finalButtonCount
        let sendBacks = [
            sendBackButton1Tapped,
            sendBackButton2Tapped,
            sendBackButton3Tapped,
        ]

        for (let i = 0; i < finalButtonCount; i++) {
            if (glyphs[i] != "none") {
                buttonFrames.push(
                    <ActionButton
                        key={i}
                        glyph={glyphs[i]}
                        label={labels[i]}
                        leftAlign={
                            actionButtonAreaWidth - buttonWidth * (i + 1)
                        }
                        buttonColor={colors[i]}
                        buttonWidth={buttonWidth}
                        troughHeight={troughHeight}
                        action={sendBacks[i]}
                    />
                )
            }
        }

        return (
            <Frame
                width={actionButtonAreaWidth}
                height={troughHeight}
                top={0}
                left={troughWidth - actionButtonAreaWidth}
            >
                {buttonFrames}
            </Frame>
        )
    }
}

class ActionButton extends React.Component<Partial<Props>, State> {
    handleShareTapLocally = () => {
        // pass the state change back up to ancestor class
        this.props.action()
    }

    render() {
        // map props shortcuts to this.props
        const {
            glyph,
            label,
            buttonColor,
            troughHeight,
            leftAlign,
            buttonWidth,
        } = this.props

        return (
            <Stack
                direction={"vertical"}
                distribution={"center"}
                alignment={"center"}
                gap={3}
                top={0}
                left={leftAlign}
                background={buttonColor}
                clip={true}
                height={troughHeight}
                width={buttonWidth}
            >
                <Frame
                    width={glyphSize}
                    height={glyphSize}
                    background={"clear"}
                    onTap={this.handleShareTapLocally.bind(this)}
                >
                    {glyphSVG[glyph]}
                </Frame>
                <Frame
                    background={"clear"}
                    style={buttonLabelStyle}
                    left={(glyphSize - buttonWidth) / 2}
                    height={20}
                    width={buttonWidth}
                    onTap={this.handleShareTapLocally.bind(this)}
                >
                    {label}
                </Frame>
            </Stack>
        )
    }
}
